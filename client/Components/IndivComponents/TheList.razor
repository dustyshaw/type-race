@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using client.Data
@inject NavigationManager Navigation
@inject IHubContext<GameHub> GameHubContext


<p><small>Connected as: <strong>@MyPlayerName</strong></small></p>
<hr />
@if (SomeoneRequestedADual)
{
    <div style="background-color: #4a4a4a; color: black;">
        Joust with 
        @if (opponentPlayer is not null)
        {
            @opponentPlayer.Name
        }
        ?
        <button @onclick="AcceptDuel">Yes</button>
    </div>
}
else if (WaitingForDualResponse)
{
    <div>
        Waiting for response from opponent...
    </div>
}
else
{
    <div class="container-sm bg-light text-black">
        <h2 class="jacquard-24-regular text-center m-0 p-0">The List</h2>
        <small class="text-center text-secondary font-monospace mb-5">Select a player to Joust</small>
        @foreach (var p in Players)
        {
            @if (p.Name != MyPlayerName)
            {
                <p class="font-monospace bg-body-tertiary">
                    @p.Name
                    <button class="btn btn-outline-primary font-monospace" @onclick="() => OnJoustClick(p)">Joust</button>
                </p>
            }
        }

        <hr />
        <h2 class="jacquard-24-regular text-center mt-4">Currently Clashing</h2>
        <p class="text-center text-secondary">Players currently jousting</p>
        <p>none</p>
    </div>
}


@code {
    [Parameter]
    public List<Player> Players { get; set; } = new();

    [Parameter]
    public string MyPlayerName { get; set; } = string.Empty;

    [Parameter]
    public HubConnection? playerHubConnection { get; set; }

    private HubConnection? hubConnection;

    private bool SomeoneRequestedADual = false;
    private bool WaitingForDualResponse = false;

    private string hubConnectionId { get; set; } = "";

    private Player? opponentPlayer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = playerHubConnection;

        if (hubConnection is null)
        {
            throw new Exception("No hub connection");
        }
        hubConnection.On<MyIdAndOpponentIdMessage>("SendRequestToOpponent", (message) => // receiver
        {

            if (message.MyConnectionId == hubConnectionId)
            {
                opponentPlayer = Players.FirstOrDefault(p => p.PlayerId == message.OpponentPlayerId);
                Console.WriteLine(MyPlayerName + " finds opponentPlayer ConnectionId: " + opponentPlayer.ConnectionId);
                SomeoneRequestedADual = true;
                InvokeAsync(StateHasChanged);
            }
        });
        hubConnection.On<Guid>("WaitingForOpponentConfirmation", (requestedPlayerId) => // instigator
        {
            var me = Players.FirstOrDefault(player => player.ConnectionId == hubConnectionId);

            if (requestedPlayerId == me.PlayerId)
            {
                WaitingForDualResponse = true;
                InvokeAsync(StateHasChanged);
            }
        });



        var gamHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        await gamHubConnection.StartAsync();
        gamHubConnection.On<string>("GameStartedMessage", (playerConnectionId) => // both ?? Why is it not getting here?
        {
            Console.WriteLine("GameStartedMessage Reciived: " + playerConnectionId);
            if (playerConnectionId == hubConnectionId)
            {
                var me = Players.FirstOrDefault(player => player.ConnectionId == hubConnectionId);
                Navigation.NavigateTo($"/game/{me.PlayerId}");
            }
        });


        hubConnectionId = hubConnection.ConnectionId.ToString();
        Console.WriteLine(MyPlayerName + " ConnectionId is: " + hubConnection.ConnectionId.ToString() + "\n");
    }


    private async Task OnJoustClick(Player player) // instigator
    {
        var me = Players.FirstOrDefault(player => player.ConnectionId == hubConnectionId);

        if (hubConnection is not null && me is not null)
        {
            await hubConnection.SendAsync("RecieveDualRequest", me.PlayerId, player.PlayerId);
        }
    }

    private async Task AcceptDuel() // receiver
    {
        var gamHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        await gamHubConnection.StartAsync();

        Console.WriteLine(opponentPlayer.Name ?? "WARNING: No opponent name found...");
        Console.WriteLine(WaitingForDualResponse + " waiting...");

        if (opponentPlayer is not null && hubConnectionId is not null && SomeoneRequestedADual)
        {
            var player1 = Players.FirstOrDefault(p => p.PlayerId == opponentPlayer.PlayerId);
            var player2 = Players.FirstOrDefault(p => p.ConnectionId == hubConnectionId);
            var me = Players.FirstOrDefault(player => player.ConnectionId == hubConnectionId);
            var gameId = Guid.NewGuid().ToString();
            await gamHubConnection.SendAsync("StartGameRequest", gameId, player1, player2);

            Navigation.NavigateTo($"/game/{gameId}/{me.PlayerId}");
        }
        else
        {
            Console.WriteLine("ERROR: failed to start the game. OpponentPlayer or Player were null.");
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;
}


