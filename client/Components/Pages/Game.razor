@page "/game/{GameId}/{MyPlayerId}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using client.Data

@inject NavigationManager NavigationManager;


<hr />
@if (MyPlayerId is not null)
{
    @MyPlayerId.ToString()
}
<hr />

<center>
    <div class="d-flex flex-row justify-content-between" style="max-width: 900px;">
        <img src="/left-blue-horse-final.png" style="width: 150px; position: relative; left: @HorsePositionPx;" />
        <img src="/right-blue-horse-final.png" style="width: 150px; position: relative; right: @OpponentHorsePositionPx;" />
    </div>
</center>
<div class="game-container">
    <p>@((MarkupString)GetHighlightedText())</p>
    <p>
        <input @oninput="OnUserInputChanged" class="typing-input bg-black text-white" />
    </p>
    <p class="feedback">
        @if (CorrectCount == TotalCharacters)
        {
            <span class="success">You completed the game!</span>
        }
        else
        {
            <span class="progress bg-black text-white">
                Correct: @CorrectCount / @TotalCharacters
            </span>
        }
    </p>
</div>


@code {
    // Get player 1 and player 2 connected to an instance of the game hub (possibly PlayerHub would work as well)?
    // On each key press, send an updated GameState to the gameHubConnection
    // Listen for GameState updated message from gameHubConnection
    // Move players according to game state

    [Parameter]
    public string MyPlayerId { get; set; } = "";

    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? userInput;
    private string? messageInput;

    private string TextToType = "The quick brown fox jumped over the lazy dog.";
    private string UserInput = "";
    private int CorrectCount = 0;
    private int TotalCharacters => TextToType.Length;
    private string HorsePositionPx => $"{CorrectCount * 5}px"; // shorthand for get only property

    private int OpponentCorrectCount = 0;
    private string OpponentHorsePositionPx => $"{OpponentCorrectCount * 5}px";

    protected override async Task OnInitializedAsync()
    {
        var connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        connection.On<GameState>("UpdatedGameState", (state) =>
        {
            if (state.PlayerId == MyPlayerId)
            {
                OpponentCorrectCount = state.Player2Progress;
            }
        });

        await connection.StartAsync();
    }

    private string GetHighlightedText()
    {
        var text = TextToType.ToCharArray();
        var typedChars = UserInput.ToCharArray();

        return new string(text.Select((c, i) =>
        {
            if (i < typedChars.Length && typedChars[i] == c)
            {
                return ("<span class=\"highlighted\">" + c + "</span>");
            }
            return c.ToString();
        }).Aggregate((current, next) => current + next));
    }

    private async Task OnUserInputChanged(ChangeEventArgs e)
    {
        UserInput = e.Value?.ToString() ?? string.Empty;
        CorrectCount = UserInput.Zip(TextToType, (typedChar, originalChar) => typedChar == originalChar).Count(x => x);

        StateHasChanged();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("PlayerTypeChange");
        }

        var connection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
           .Build();

        await connection.StartAsync();

        GameStateUpdateRequest request = new()
            {
                PlayerId = MyPlayerId,
                Progress = CorrectCount
            };

        await connection.SendAsync("RecieveUpdatedGameState", request);
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

}