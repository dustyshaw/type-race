@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using client.Components.IndivComponents
@using client.Data
@using static System.Net.WebRequestMethods
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;
@inject HttpClient Http;
@inject HubConnection hubConnection;

<PageTitle>Clash of Keys</PageTitle>

<center>
    <div class="d-flex flex-row justify-content-between" style="max-width: 900px">
        <img src="/white-banner.png" style="width: 180px; height: auto;" class="img" />
        <h1 class="jacquard-24-regular" style="font-size: 90px;">Clash of Keys</h1>
        <img src="/blue-banner.png" style="width:180px; height: auto;" class="img" />
    </div>
</center>
<hr />
@if (!joined)
{
    <center>
        <div class="position-relative" style="width: 600px; height: 200px;">
            <img src="/text-box.png" class="position-absolute top-0 start-0 w-100 h-100" style="object-fit: contain;" />
            <input @bind-value="newPlayerName"
                   type="text"
                   class="bg-transparent text-black font-monospace position-absolute top-50 start-50 translate-middle text-center border-0"
                   style="font-size: 30px; width: 90%; outline: none; box-shadow: none;" />
        </div>
        <button @onclick="Send" class="btn-outline-secondary font-monospace">Join</button>
    </center>
}
else
{
    <TheList Players="allPlayers" MyPlayerName=@newPlayerName playerHubConnection="hubConnection" />
}

@code {
    private string newPlayerName = "";
    private List<Player> allPlayers = new List<Player>();

    private string myConnectionId { get; set; } = "";
    private bool joined = false;


    private List<string> namesList = new List<string>
    {
        "Lancelot",
        "Bartholomew",
        "Bertram",
        "Thomas",
        "William",
        "Arthur",
        "Guinevere",
        "Roland",
        "Gawain",
        "Isolde",
        "Merlin",
        "Eleanor",
        "Richard",
        "Hector",
        "Beatrix",
        "Geoffrey",
        "Alistair",
        "Eustace",
        "Vivienne",
        "Reginald"
    };

    protected override async Task OnInitializedAsync()
    {
        newPlayerName = "sir_" + namesList[Random.Shared.Next(namesList.Count)];

        hubConnection.On<UpdatedPlayersListMessage>("BroadcastPlayers", (updatedPlayersList) =>
        {
            allPlayers = updatedPlayersList.UpdatedPlayers;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        myConnectionId = hubConnection.ConnectionId.ToString();

        await AskForPlayers();
    }

    private async Task AskForPlayers()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("GetPlayers");
        }
    }

    private async Task Send()
    {

        if (hubConnection is not null && !string.IsNullOrWhiteSpace(newPlayerName) && hubConnection.ConnectionId is not null)
        {
            var request = new ConnectToAllPlayersRequest(newPlayerName, hubConnection.ConnectionId);
            await hubConnection.SendAsync("ConnectPlayer", request);
        }
        joined = true;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public class NamesJson
    {
        public List<string> Names { get; set; } = new();
    }
}
