@using Microsoft.AspNetCore.SignalR.Client
@using client.Data
@inject NavigationManager NavigationManager;

<h3>Join Lobby</h3>
<p>@message</p>
@foreach (var l in mylobbies)
{
    <p @onclick="() => Send(l.LobbyId)" class="text-bg-primary link-underline" role="button">@l.LobbyName - @l.Players.Count().ToString() Players</p>
}


@code {
    private HubConnection? hubConnection;
    private List<UpdatedLobbiesMessage> mylobbies = [];
    private string LobbyName = "";

    private string message = "not joined";

    private Guid playerId = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/lobbyhub"))
            .Build();

        hubConnection.On<List<UpdatedLobbiesMessage>>("ReceiveUpdatedLobbies", (lobbies) =>
        {
            mylobbies = lobbies;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Guid, string>("SuccessfullyJoinedLobby", (lobbyId, lobbyName) =>
        {
            message = $"Joined Lobby! {lobbyId} - {lobbyName}";
            NavigationManager.NavigateTo($"/lobby/{lobbyId}");
        });


        await hubConnection.StartAsync();

        await AskForLobbies();
    }

    private async Task AskForLobbies()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AskForLobbies");
        }
    }

    private async Task Send(Guid requestedLobbyId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinLobby", new JoinLobbyRequest
                {
                    LobbyId = requestedLobbyId,
                    PlayerId = playerId
                });
        }
    }

}
